extends claritybase

block headstyle
    style.
        .language-json { font-size: 9pt; }

block header
    div(class="header-actions")
        a(href="/logout" class="nav-link nav-text") Logout

block sidebar
    section(class="sidenav-content")
        section(class="nav-group")
            // Add a few stock vAPI calls to inspect vSphere
            ul(class="nav-list")
                li
                    a(class="nav-link" href="?path=/rest/vcenter/host") Host
                li
                    a(class="nav-link" href="?path=/rest/vcenter/datacenter") Datacenter
                li
                    a(class="nav-link" href="?path=/rest/vcenter/datastore") Datastore
                li
                    a(class="nav-link" href="?path=/rest/vcenter/cluster") Clusters
                li
                    a(class="nav-link" href="?path=/rest/vcenter/folder") Folders
                li
                    a(class="nav-link" href="?path=/rest/vcenter/network") Networks
                li
                    a(class="nav-link" href="?path=/rest/vcenter/vm") VM
                li
                    a(class="nav-link" href="?path=/rest/vcenter/folder") Folders
                li
                    a(class="nav-link" href="?path=/rest/com/vmware/cis/tagging/category") Categories
                li
                    a(class="nav-link" href="?path=/rest/com/vmware/cis/tagging/tag") Tags
                li
                    a(class="nav-link" href="?path=/rest/com/vmware/vcenter/ovf/export-flag") OVF Export Flag
                //li
                //    a(class="nav-link" href="?path=/rest/com/vmware/vcenter/ovf/import-flag") OVF Import Flag
                li
                    a(class="nav-link" href="?path=/rest/vcenter/resource-pool") Resource Pool
                li
                    a(class="nav-link" href="?path=/rest/com/vmware/content/library") Content Library
                li
                    a(class="nav-link" href="?path=/rest/appliance/access/consolecli") Access Console CLI
                li
                    a(class="nav-link" href="?path=/rest/appliance/health/applmgmt") Appliance Health
                li
                    a(class="nav-link" href="?path=/rest/appliance/health/load") Appliance Health Load
                li
                    a(class="nav-link" href="?path=/rest/appliance/health/mem") Appliance Health Mem
                li
                    a(class="nav-link" href="?path=/rest/appliance/health/mem") Appliance Health System
                li
                    a(class="nav-link" href="?path=/rest/appliance/networking/dns/domains") DNS Domains
                li
                    a(class="nav-link" href="?path=/rest/appliance/networking/dns/hostname") DNS Host Name
                li
                    a(class="nav-link" href="?path=/rest/appliance/networking/interfaces") Networking Interfaces
                li
                    a(class="nav-link" href="?path=/rest/appliance/recovery/backup/job") Recovery Backup Jobs
                li
                    a(class="nav-link" href="?path=/rest/appliance/system/storage") System Storage
                li
                    a(class="nav-link" href="?path=/rest/appliance/system/time") System Time
                li
                    a(class="nav-link" href="?path=/rest/appliance/system/uptime") System Uptime
                li
                    a(class="nav-link" href="?path=/rest/appliance/system/version") System Version
                li
                    a(class="nav-link" href="?path=/rest/appliance/vmon/service") VMon Service

mixin objectTable(data)
    table(class="table table-striped")
        tr
            for key in Object.keys(data)
                th(class="left") #{key}
        tr
            for key in Object.keys(data)
                if typeof data[key] == 'object'
                    td 
                        +objectTable(data[key])
                else
                    if data[key].constructor == Array
                        td +tableArray(data[key])
                    else
                        td #{data[key]}
    

mixin tableArray(data)
    - console.log('test')
    if data == []
        - console.log('test')
        div testing
    else
        table(class="table table-striped")
            tr
                for key in Object.keys(data[0])
                    th(class="left") #{key}
            for t in data
                tr
                    if typeof t == 'string'
                        td(class="left") #{t}
                    else
                        for key in Object.keys(t)
                            // Optionally display links for ID fields to see nested data
                            if (key == id)
                                td(class="left")
                                    strong
                                        a(href=`?path=${path}\/${t[key]}`) #{t[key]}
                            else
                                if typeof t[key] == "object"
                                    td 
                                        +tableData(t[key])
                                    //td(class="left") #{JSON.stringify(t[key])}
                                else
                                    td(class="left") #{t[key]}

mixin tableData(data)
        table(class="table table-striped")
            tr
                if (data.constructor == Array && data.length > 0)
                    if typeof data[0] == 'string'
                        th(class="left") value
                    else
                        for key in Object.keys(data[0])
                            th(class="left") #{key}
                else
                    th(class="left") value
            for t in data
                tr
                    if typeof t == 'string'
                        td(class="left") #{t}
                    else
                        for key in Object.keys(t)
                            // Optionally display links for ID fields to see nested data
                            if (key == id)
                                td(class="left")
                                    strong
                                        a(href=`?path=${path}\/${t[key]}`) #{t[key]}
                            else
                                if typeof t[key] == "object"
                                    td(class="left") #{JSON.stringify(t[key])}
                                else
                                    td(class="left") #{t[key]}


block content
    // Basic table to display the results
    h2 #{host}
    div API: #{path}
    if data
        +tableData(data)

    // Display the raw JSON response
    h4 REST JSON Data
    pre
        code(class="language-json").
            #{raw}
